#include <stdio.h>
#include <stdlib.h>

#define MAX 20

// Function to check if it's safe to place a queen at board[row][col]
int isSafe(int board[MAX][MAX], int row, int col, int n) {
    int i, j;

    // Check the same column on the upper side
    for (i = 0; i < row; i++) {
        if (board[i][col] == 1)
            return 0;
    }

    // Check the upper-left diagonal
    for (i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1)
            return 0;
    }

    // Check the upper-right diagonal
    for (i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 1)
            return 0;
    }

    return 1;
}

// Function to solve the N-Queens problem using backtracking
int solveNQueens(int board[MAX][MAX], int row, int n) {
    // If all queens are placed, return true
    if (row == n)
        return 1;

    // Try placing the queen in each column
    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 1; // Place the queen

            if (solveNQueens(board, row + 1, n))
                return 1; // If placing the queen leads to a solution, return true

            board[row][col] = 0; // Backtrack and remove the queen
        }
    }

    return 0; // If no column is valid, return false
}

// Function to print the solution
void printSolution(int board[MAX][MAX], int n) {
    printf("Solution:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1)
                printf("Q ");
            else
                printf(". ");
        }
        printf("\n");
    }

    printf("Queen positions (1-based column indices): ");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1)
                printf("%d ", j + 1);
        }
    }
    printf("\n");
}

// Main function
int main() {
    int n = 4; // Number of queens (can be adjusted)
    int board[MAX][MAX] = {0}; // Initialize the board with zeros

    if (solveNQueens(board, 0, n)) {
        printSolution(board, n);
    } else {
        printf("No solution exists.\n");
    }

    return 0;
}
