#include <stdio.h>
#include <limits.h>

#define MAX 20 // Maximum number of cities

int tsp(int cost[MAX][MAX], int visited[MAX], int currPos, int n, int count, int currCost, int start) {
    // Base case: if all cities are visited, return the cost to return to the starting city
    if (count == n && cost[currPos][start] > 0) {
        return currCost + cost[currPos][start];
    }

    int minCost = INT_MAX;

    // Try visiting every city
    for (int i = 0; i < n; i++) {
        // If the city is not visited and there's a path from currPos to i
        if (!visited[i] && cost[currPos][i] > 0) {
            visited[i] = 1;
            // Recur for the next city
            int tempCost = tsp(cost, visited, i, n, count + 1, currCost + cost[currPos][i], start);
            minCost = (tempCost < minCost) ? tempCost : minCost;
            visited[i] = 0; // Backtrack
        }
    }

    return minCost;
}

int main() {
    int cost[MAX][MAX] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int n = 4; // Number of cities
    int visited[MAX] = {0}; // To track visited cities

    visited[0] = 1; // Start from city 0
    int minCost = tsp(cost, visited, 0, n, 1, 0, 0);

    printf("The minimum cost to visit all cities is: %d\n", minCost);

    return 0;
}
