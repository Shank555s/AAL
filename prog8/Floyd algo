#include <stdio.h>
#define INF 100000000 // Define a large number as "infinity"

// Function to implement the Floyd-Warshall algorithm
void floydWarshall(int dist[][5], int V) {
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                // Check to avoid overflow when using INF
                if (dist[i][k] != INF && dist[k][j] != INF) {
                    dist[i][j] = (dist[i][j] < dist[i][k] + dist[k][j]) 
                                   ? dist[i][j] 
                                   : dist[i][k] + dist[k][j];
                }
            }
        }
    }
}

// Main function
int main() {
    int V = 5; // Number of vertices

    // Initial distance matrix
    int dist[5][5] = {
        {0, 4, INF, 5, INF},
        {INF, 0, 1, INF, 6},
        {2, INF, 0, 3, INF},
        {INF, INF, 1, 0, 2},
        {1, INF, INF, 4, 0}
    };

    // Run the Floyd-Warshall algorithm
    floydWarshall(dist, V);

    // Print the resulting shortest path matrix
    printf("The shortest distances between every pair of vertices:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF) {
                printf("INF ");
            } else {
                printf("%d ", dist[i][j]);
            }
        }
        printf("\n");
    }

    return 0;
}
